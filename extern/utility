#pragma once
namespace std {

template <class T>
struct remove_reference { typedef T type; };

template <class T>
struct remove_reference<T&> { typedef T type; };

template <class T>
struct remove_reference<T&&> { typedef T type; };

template <class T>
constexpr typename std::remove_reference<T>::type&& move(T&& t) noexcept {
    return static_cast<typename std::remove_reference<T>::type&&>(t);
}

template <class T>
void swap(T& a, T& b) {
    T temp{std::move(a)};
    a = std::move(b);
    b = std::move(temp);
}
}  // namespace std